FILE(1)                   BSD General Commands Manual                  FILE(1)

NNAAMMEE
     ffiillee — determine file type

SSYYNNOOPPSSIISS
     ffiillee [--bbccddEEhhiikkllLLNNnnpprrssSSvvzzZZ00] [----aappppllee] [----eexxtteennssiioonn] [----mmiimmee--eennccooddiinngg]
          [----mmiimmee--ttyyppee] [--ee _t_e_s_t_n_a_m_e] [--FF _s_e_p_a_r_a_t_o_r] [--ff _n_a_m_e_f_i_l_e]
          [--mm _m_a_g_i_c_f_i_l_e_s] [--PP _n_a_m_e_=_v_a_l_u_e] _f_i_l_e _._._.
     ffiillee --CC [--mm _m_a_g_i_c_f_i_l_e_s]
     ffiillee [----hheellpp]

DDEESSCCRRIIPPTTIIOONN
     This manual page documents version 5.38 of the ffiillee command.

     ffiillee tests each argument in an attempt to classify it.  There are three
     sets of tests, performed in this order: filesystem tests, magic tests,
     and language tests.  The _f_i_r_s_t test that succeeds causes the file type to
     be printed.

     The type printed will usually contain one of the words _t_e_x_t (the file
     contains only printing characters and a few common control characters and
     is probably safe to read on an ASCII terminal), _e_x_e_c_u_t_a_b_l_e (the file con‐
     tains the result of compiling a program in a form understandable to some
     UNIX kernel or another), or _d_a_t_a meaning anything else (data is usually
     “binary” or non-printable).  Exceptions are well-known file formats (core
     files, tar archives) that are known to contain binary data.  When adding
     local definitions to /etc/magic, make sure to _p_r_e_s_e_r_v_e _t_h_e_s_e _k_e_y_w_o_r_d_s.
     Users depend on knowing that all the readable files in a directory have
     the word “text” printed.  Don't do as Berkeley did and change “shell
     commands text” to “shell script”.

     The filesystem tests are based on examining the return from a stat(2)
     system call.  The program checks to see if the file is empty, or if it's
     some sort of special file.  Any known file types appropriate to the sys‐
     tem you are running on (sockets, symbolic links, or named pipes (FIFOs)
     on those systems that implement them) are intuited if they are defined in
     the system header file <_s_y_s_/_s_t_a_t_._h>.

     The magic tests are used to check for files with data in particular fixed
     formats.  The canonical example of this is a binary executable (compiled
     program) a.out file, whose format is defined in <_e_l_f_._h>, <_a_._o_u_t_._h> and
     possibly <_e_x_e_c_._h> in the standard include directory.  These files have a
     “magic number” stored in a particular place near the beginning of the
     file that tells the UNIX operating system that the file is a binary exe‐
     cutable, and which of several types thereof.  The concept of a “magic”
     has been applied by extension to data files.  Any file with some invari‐
     ant identifier at a small fixed offset into the file can usually be de‐
     scribed in this way.  The information identifying these files is read
     from /etc/magic and the compiled magic file _/_u_s_r_/_s_h_a_r_e_/_m_i_s_c_/_m_a_g_i_c_._m_g_c, or
     the files in the directory _/_u_s_r_/_s_h_a_r_e_/_m_i_s_c_/_m_a_g_i_c if the compiled file
     does not exist.  In addition, if _$_H_O_M_E_/_._m_a_g_i_c_._m_g_c or _$_H_O_M_E_/_._m_a_g_i_c exists,
     it will be used in preference to the system magic files.

     If a file does not match any of the entries in the magic file, it is ex‐
     amined to see if it seems to be a text file.  ASCII, ISO-8859-x, non-ISO
     8-bit extended-ASCII character sets (such as those used on Macintosh and
     IBM PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and
     EBCDIC character sets can be distinguished by the different ranges and
     sequences of bytes that constitute printable text in each set.  If a file
     passes any of these tests, its character set is reported.  ASCII,
     ISO-8859-x, UTF-8, and extended-ASCII files are identified as “text” be‐
     cause they will be mostly readable on nearly any terminal; UTF-16 and
     EBCDIC are only “character data” because, while they contain text, it is
     text that will require translation before it can be read.  In addition,
     ffiillee will attempt to determine other characteristics of text-type files.
     If the lines of a file are terminated by CR, CRLF, or NEL, instead of the
     Unix-standard LF, this will be reported.  Files that contain embedded es‐
     cape sequences or overstriking will also be identified.

     Once ffiillee has determined the character set used in a text-type file, it
     will attempt to determine in what language the file is written.  The lan‐
     guage tests look for particular strings (cf.  <_n_a_m_e_s_._h>) that can appear
     anywhere in the first few blocks of a file.  For example, the keyword _._b_r
     indicates that the file is most likely a troff(1) input file, just as the
     keyword _s_t_r_u_c_t indicates a C program.  These tests are less reliable than
     the previous two groups, so they are performed last.  The language test
     routines also test for some miscellany (such as tar(1) archives, JSON
     files).

     Any file that cannot be identified as having been written in any of the
     character sets listed above is simply said to be “data”.

OOPPTTIIOONNSS
     ----aappppllee
             Causes the file command to output the file type and creator code
             as used by older MacOS versions.  The code consists of eight let‐
             ters, the first describing the file type, the latter the creator.
             This option works properly only for file formats that have the
             apple-style output defined.

     --bb, ----bbrriieeff
             Do not prepend filenames to output lines (brief mode).

     --CC, ----ccoommppiillee
             Write a _m_a_g_i_c_._m_g_c output file that contains a pre-parsed version
             of the magic file or directory.

     --cc, ----cchheecckkiinngg--pprriinnttoouutt
             Cause a checking printout of the parsed form of the magic file.
             This is usually used in conjunction with the --mm flag to debug a
             new magic file before installing it.

     --dd      Prints internal debugging information to stderr.

     --EE      On filesystem errors (file not found etc), instead of handling
             the error as regular output as POSIX mandates and keep going, is‐
             sue an error message and exit.

     --ee, ----eexxcclluuddee _t_e_s_t_n_a_m_e
             Exclude the test named in _t_e_s_t_n_a_m_e from the list of tests made to
             determine the file type.  Valid test names are:

             apptype   EMX application type (only on EMX).

             ascii     Various types of text files (this test will try to
                       guess the text encoding, irrespective of the setting of
                       the ‘encoding’ option).

             encoding  Different text encodings for soft magic tests.

             tokens    Ignored for backwards compatibility.

             cdf       Prints details of Compound Document Files.

             compress  Checks for, and looks inside, compressed files.

             csv       Checks Comma Separated Value files.

             elf       Prints ELF file details, provided soft magic tests are
                       enabled and the elf magic is found.

             json      Examines JSON (RFC-7159) files by parsing them for com‐
                       pliance.

             soft      Consults magic files.

             tar       Examines tar files by verifying the checksum of the 512
                       byte tar header.  Excluding this test can provide more
                       detailed content description by using the soft magic
                       method.

             text      A synonym for ‘ascii’.

     ----eexxtteennssiioonn
             Print a slash-separated list of valid extensions for the file
             type found.

     --FF, ----sseeppaarraattoorr _s_e_p_a_r_a_t_o_r
             Use the specified string as the separator between the filename
             and the file result returned.  Defaults to ‘:’.

     --ff, ----ffiilleess--ffrroomm _n_a_m_e_f_i_l_e
             Read the names of the files to be examined from _n_a_m_e_f_i_l_e (one per
             line) before the argument list.  Either _n_a_m_e_f_i_l_e or at least one
             filename argument must be present; to test the standard input,
             use ‘-’ as a filename argument.  Please note that _n_a_m_e_f_i_l_e is un‐
             wrapped and the enclosed filenames are processed when this option
             is encountered and before any further options processing is done.
             This allows one to process multiple lists of files with different
             command line arguments on the same ffiillee invocation.  Thus if you
             want to set the delimiter, you need to do it before you specify
             the list of files, like: “--FF _@ --ff _n_a_m_e_f_i_l_e”, instead of: “--ff
             _n_a_m_e_f_i_l_e --FF _@”.

     --hh, ----nnoo--ddeerreeffeerreennccee
             option causes symlinks not to be followed (on systems that sup‐
             port symbolic links).  This is the default if the environment
             variable POSIXLY_CORRECT is not defined.

     --ii, ----mmiimmee
             Causes the file command to output mime type strings rather than
             the more traditional human readable ones.  Thus it may say
             ‘text/plain; charset=us-ascii’ rather than “ASCII text”.

     ----mmiimmee--ttyyppee, ----mmiimmee--eennccooddiinngg
             Like --ii, but print only the specified element(s).

     --kk, ----kkeeeepp--ggooiinngg
             Don't stop at the first match, keep going.  Subsequent matches
             will be have the string ‘\012- ’ prepended.  (If you want a new‐
             line, see the --rr option.)  The magic pattern with the highest
             strength (see the --ll option) comes first.

     --ll, ----lliisstt
             Shows a list of patterns and their strength sorted descending by
             magic(5) strength which is used for the matching (see also the --kk
             option).

     --LL, ----ddeerreeffeerreennccee
             option causes symlinks to be followed, as the like-named option
             in ls(1) (on systems that support symbolic links).  This is the
             default if the environment variable POSIXLY_CORRECT is defined.

     --mm, ----mmaaggiicc--ffiillee _m_a_g_i_c_f_i_l_e_s
             Specify an alternate list of files and directories containing
             magic.  This can be a single item, or a colon-separated list.  If
             a compiled magic file is found alongside a file or directory, it
             will be used instead.

     --NN, ----nnoo--ppaadd
             Don't pad filenames so that they align in the output.

     --nn, ----nnoo--bbuuffffeerr
             Force stdout to be flushed after checking each file.  This is
             only useful if checking a list of files.  It is intended to be
             used by programs that want filetype output from a pipe.

     --pp, ----pprreesseerrvvee--ddaattee
             On systems that support utime(3) or utimes(2), attempt to pre‐
             serve the access time of files analyzed, to pretend that ffiillee
             never read them.

     --PP, ----ppaarraammeetteerr _n_a_m_e_=_v_a_l_u_e
             Set various parameter limits.

                   NNaammee         DDeeffaauulltt    EExxppllaannaattiioonn
                   indir        15         recursion limit for indirect magic
                   name         30         use count limit for name/use magic
                   elf_notes    256        max ELF notes processed
                   elf_phnum    128        max ELF program sections processed
                   elf_shnum    32768      max ELF sections processed
                   regex        8192       length limit for regex searches
                   bytes        1048576    max number of bytes to read from
                                                                          file

     --rr, ----rraaww
             Don't translate unprintable characters to \ooo.  Normally ffiillee
             translates unprintable characters to their octal representation.

     --ss, ----ssppeecciiaall--ffiilleess
             Normally, ffiillee only attempts to read and determine the type of
             argument files which stat(2) reports are ordinary files.  This
             prevents problems, because reading special files may have pecu‐
             liar consequences.  Specifying the --ss option causes ffiillee to also
             read argument files which are block or character special files.
             This is useful for determining the filesystem types of the data
             in raw disk partitions, which are block special files.  This op‐
             tion also causes ffiillee to disregard the file size as reported by
             stat(2) since on some systems it reports a zero size for raw disk
             partitions.

     --SS, ----nnoo--ssaannddbbooxx
             On systems where libseccomp
             (_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_s_e_c_c_o_m_p_/_l_i_b_s_e_c_c_o_m_p) is available, the --SS flag
             disables sandboxing which is enabled by default.  This option is
             needed for file to execute external decompressing programs, i.e.
             when the --zz flag is specified and the built-in decompressors are
             not available.  On systems where sandboxing is not available,
             this option has no effect.

             _N_o_t_e_: This Debian version of file was built without seccomp sup‐
             port, so this option has no effect.

     --vv, ----vveerrssiioonn
             Print the version of the program and exit.

     --zz, ----uunnccoommpprreessss
             Try to look inside compressed files.

     --ZZ, ----uunnccoommpprreessss--nnoorreeppoorrtt
             Try to look inside compressed files, but report information about
             the contents only not the compression.

     --00, ----pprriinntt00
             Output a null character ‘\0’ after the end of the filename.  Nice
             to cut(1) the output.  This does not affect the separator, which
             is still printed.

             If this option is repeated more than once, then ffiillee prints just
             the filename followed by a NUL followed by the description (or
             ERROR: text) followed by a second NUL for each entry.

     ----hheellpp  Print a help message and exit.

EENNVVIIRROONNMMEENNTT
     The environment variable MAGIC can be used to set the default magic file
     name.  If that variable is set, then ffiillee will not attempt to open
     _$_H_O_M_E_/_._m_a_g_i_c.  ffiillee adds “_._m_g_c” to the value of this variable as appro‐
     priate.  The environment variable POSIXLY_CORRECT controls (on systems
     that support symbolic links), whether ffiillee will attempt to follow sym‐
     links or not.  If set, then ffiillee follows symlink, otherwise it does not.
     This is also controlled by the --LL and --hh options.

FFIILLEESS
     /usr/share/misc/magic.mgc  Default compiled list of magic.
     /usr/share/misc/magic      Directory containing default magic files.

EEXXIITT SSTTAATTUUSS
     ffiillee will exit with 0 if the operation was successful or >0 if an error
     was encountered.  The following errors cause diagnostic messages, but
     don't affect the program exit code (as POSIX requires), unless --EE is
     specified:
           ••   A file cannot be found
           ••   There is no permission to read a file
           ••   The file type cannot be determined

EEXXAAMMPPLLEESS
           $ file file.c file /dev/{wd0a,hda}
           file.c:   C program text
           file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
                     dynamically linked (uses shared libs), stripped
           /dev/wd0a: block special (0/0)
           /dev/hda: block special (3/0)

           $ file -s /dev/wd0{b,d}
           /dev/wd0b: data
           /dev/wd0d: x86 boot sector

           $ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
           /dev/hda:   x86 boot sector
           /dev/hda1:  Linux/i386 ext2 filesystem
           /dev/hda2:  x86 boot sector
           /dev/hda3:  x86 boot sector, extended partition table
           /dev/hda4:  Linux/i386 ext2 filesystem
           /dev/hda5:  Linux/i386 swap file
           /dev/hda6:  Linux/i386 swap file
           /dev/hda7:  Linux/i386 swap file
           /dev/hda8:  Linux/i386 swap file
           /dev/hda9:  empty
           /dev/hda10: empty

           $ file -i file.c file /dev/{wd0a,hda}
           file.c:      text/x-c
           file:        application/x-executable
           /dev/hda:    application/x-not-regular-file
           /dev/wd0a:   application/x-not-regular-file

SSEEEE AALLSSOO
     hexdump(1), od(1), strings(1), magic(5)

SSTTAANNDDAARRDDSS CCOONNFFOORRMMAANNCCEE
     This program is believed to exceed the System V Interface Definition of
     FILE(CMD), as near as one can determine from the vague language contained
     therein.  Its behavior is mostly compatible with the System V program of
     the same name.  This version knows more magic, however, so it will pro‐
     duce different (albeit more accurate) output in many cases.

     The one significant difference between this version and System V is that
     this version treats any white space as a delimiter, so that spaces in
     pattern strings must be escaped.  For example,

           >10     string  language impress        (imPRESS data)

     in an existing magic file would have to be changed to

           >10     string  language\ impress       (imPRESS data)

     In addition, in this version, if a pattern string contains a backslash,
     it must be escaped.  For example

           0       string          \begindata      Andrew Toolkit document

     in an existing magic file would have to be changed to

           0       string          \\begindata     Andrew Toolkit document

     SunOS releases 3.2 and later from Sun Microsystems include a ffiillee command
     derived from the System V one, but with some extensions.  This version
     differs from Sun's only in minor ways.  It includes the extension of the
     ‘&’ operator, used as, for example,

           >16     long&0x7fffffff >0              not stripped

SSEECCUURRIITTYY
     On systems where libseccomp (_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_s_e_c_c_o_m_p_/_l_i_b_s_e_c_c_o_m_p) is
     available, ffiillee is enforces limiting system calls to only the ones neces‐
     sary for the operation of the program.  This enforcement does not provide
     any security benefit when ffiillee is asked to decompress input files running
     external programs with the --zz option.  To enable execution of external
     decompressors, one needs to disable sandboxing using the --SS flag.

MMAAGGIICC DDIIRREECCTTOORRYY
     The magic file entries have been collected from various sources, mainly
     USENET, and contributed by various authors.  Christos Zoulas (address be‐
     low) will collect additional or corrected magic file entries.  A consoli‐
     dation of magic file entries will be distributed periodically.

     The order of entries in the magic file is significant.  Depending on what
     system you are using, the order that they are put together may be incor‐
     rect.

HHIISSTTOORRYY
     There has been a ffiillee command in every UNIX since at least Research
     Version 4 (man page dated November, 1973).  The System V version intro‐
     duced one significant major change: the external list of magic types.
     This slowed the program down slightly but made it a lot more flexible.

     This program, based on the System V version, was written by Ian Darwin
     ⟨ian@darwinsys.com⟩ without looking at anybody else's source code.

     John Gilmore revised the code extensively, making it better than the
     first version.  Geoff Collyer found several inadequacies and provided
     some magic file entries.  Contributions of the ‘&’ operator by Rob McMa‐
     hon, ⟨cudcv@warwick.ac.uk⟩, 1989.

     Guy Harris, ⟨guy@netapp.com⟩, made many changes from 1993 to the present.

     Primary development and maintenance from 1990 to the present by Christos
     Zoulas ⟨christos@astron.com⟩.

     Altered by Chris Lowth ⟨chris@lowth.com⟩, 2000: handle the --ii option to
     output mime type strings, using an alternative magic file and internal
     logic.

     Altered by Eric Fischer ⟨enf@pobox.com⟩, July, 2000, to identify charac‐
     ter codes and attempt to identify the languages of non-ASCII files.

     Altered by Reuben Thomas ⟨rrt@sc3d.org⟩, 2007-2011, to improve MIME sup‐
     port, merge MIME and non-MIME magic, support directories as well as files
     of magic, apply many bug fixes, update and fix a lot of magic, improve
     the build system, improve the documentation, and rewrite the Python bind‐
     ings in pure Python.

     The list of contributors to the ‘magic’ directory (magic files) is too
     long to include here.  You know who you are; thank you.  Many contribu‐
     tors are listed in the source files.

LLEEGGAALL NNOOTTIICCEE
     Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.  Covered by the
     standard Berkeley Software Distribution copyright; see the file COPYING
     in the source distribution.

     The files _t_a_r_._h and _i_s___t_a_r_._c were written by John Gilmore from his pub‐
     lic-domain tar(1) program, and are not covered by the above license.

BBUUGGSS
     Please report bugs and send patches to the bug tracker at
     _h_t_t_p_s_:_/_/_b_u_g_s_._a_s_t_r_o_n_._c_o_m_/ or the mailing list at ⟨file@astron.com⟩ (visit
     _h_t_t_p_s_:_/_/_m_a_i_l_m_a_n_._a_s_t_r_o_n_._c_o_m_/_m_a_i_l_m_a_n_/_l_i_s_t_i_n_f_o_/_f_i_l_e first to subscribe).

TTOODDOO
     Fix output so that tests for MIME and APPLE flags are not needed all over
     the place, and actual output is only done in one place.  This needs a de‐
     sign.  Suggestion: push possible outputs on to a list, then pick the
     last-pushed (most specific, one hopes) value at the end, or use a default
     if the list is empty.  This should not slow down evaluation.

     The handling of MAGIC_CONTINUE and printing \012- between entries is
     clumsy and complicated; refactor and centralize.

     Some of the encoding logic is hard-coded in encoding.c and can be moved
     to the magic files if we had a !:charset annotation

     Continue to squash all magic bugs.  See Debian BTS for a good source.

     Store arbitrarily long strings, for example for %s patterns, so that they
     can be printed out.  Fixes Debian bug #271672.  This can be done by allo‐
     cating strings in a string pool, storing the string pool at the end of
     the magic file and converting all the string pointers to relative offsets
     from the string pool.

     Add syntax for relative offsets after current level (Debian bug #466037).

     Make file -ki work, i.e. give multiple MIME types.

     Add a zip library so we can peek inside Office2007 documents to print
     more details about their contents.

     Add an option to print URLs for the sources of the file descriptions.

     Combine script searches and add a way to map executable names to MIME
     types (e.g. have a magic value for !:mime which causes the resulting
     string to be looked up in a table).  This would avoid adding the same
     magic repeatedly for each new hash-bang interpreter.

     When a file descriptor is available, we can skip and adjust the buffer
     instead of the hacky buffer management we do now.

     Fix “name” and “use” to check for consistency at compile time (duplicate
     “name”, “use” pointing to undefined “name” ).  Make “name” / “use” more
     efficient by keeping a sorted list of names.  Special-case ^ to flip en‐
     dianness in the parser so that it does not have to be escaped, and docu‐
     ment it.

     If the offsets specified internally in the file exceed the buffer size (
     HOWMANY variable in file.h), then we don't seek to that offset, but we
     give up.  It would be better if buffer managements was done when the file
     descriptor is available so move around the file.  One must be careful
     though because this has performance (and thus security considerations).

AAVVAAIILLAABBIILLIITTYY
     You can obtain the original author's latest version by anonymous FTP on
     _f_t_p_._a_s_t_r_o_n_._c_o_m in the directory _/_p_u_b_/_f_i_l_e_/_f_i_l_e_-_X_._Y_Z_._t_a_r_._g_z.

BSD                              July 13, 2019                             BSD
